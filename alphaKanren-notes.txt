What is nominal logic programming?

http://webyrd.net/alphamk/alphamk.pdf

alpha-equivalence in the lambda calculus
in lambda calc
1) variables
2) abstraction/lambda
3) application (procedure call)

alpha equivalence has to do with the lambda expressions
One of its interesting properties is as a binding form - introduce a variable and use it in the body
As long as we're careful not to inadvertently capture/shadow other variables, we can change the name of a parameter and all occurances of it in the body without changing the program
- consistent renaming of bound variables is safe

So, (lambda (x) x) and (lambda (y) y) are the same in some sense
- they are not syntactically identical (as quoted forms they are distinct lists)
- but when you evaluate these expressions they both return the identity procedure
- the behavior of the resulting procedures are identical
- so we say these two lambdas are "alpha equivalent" (based on one of Church's rules)
- implementing alpha equivalence is not so straight forward

If you want to build something that manipulates code - languages, tools, etc. - you have to have some handling/notion of alpha equivalence

"Nominal Logic" is a logic that talks about variable names and binding

Binding logic comes up in other places besides just the lambda calculus
- logic itself (first order logic)
    - exists X . forall Y . X > Y
    - these statements have scoping rules just like functions
- Calculus
    - it is a symbolic language that cares about names of variables
- Macros (scheme/lisp/or other language)
    - "hygenic"

- binding the name of a variable to a value comes up over and over again
- it is a very general notion that applies in many contexts

Andy Pitts at Cambridge + his students have done a lot of work in this area
- Christian Urban
- Matt Lakin (alphaML)
- James Cheney (alphaProlog)

alphaKanren - implementation of nominal logic programming in miniKanren
- (== '(λ (x) x) '(λ (y) y)) normally will not unify since they are not the same syntactically

What if we tried

(fresh (x y)
    (symbolo x)
    (symbolo y)
    (== `(λ (,x) ,x) ; (list 'lambda (list x) x)
        `(λ (,y) ,y))) 

this will unify, but what if things get more complicated


(fresh (x y z)
    (symbolo x)
    (symbolo y)
    (symbolo z)
    (== `(λ (,x) (λ (z) x))
        `(λ (,y) (λ (z) z))))

This will still unify, but these two terms don't represent the same lambda term anymore, so they shouldn't unify
we end up with (λ (x) (λ (x) x)) for both terms

So the first thing that Nominal Logic Programming (NLP) is going to do, is change the definition of unification.  originally we had a sort of "equal?" based semantics for unification (==)
Now, we're going to have an alpha-equivalent version of unification, ==-alpha or something.
(==-alpha '(λ (x) x) '(λ (y) y)) would unify

So instead of having the minikanren environment have to understand lambda and all the other binding terms we might use, we're going to build up the terms using new operators

; tie operator - scoping operator, x is only bound within the body of the tie expression
(fresh-nom (x y) ; introduces special variables that aren't logic variables, but lexical variables in the system that have scope associated with them
                 ; this is like lexically scoped gen-syms
    (== `(λ ,(tie x `(var ,x))) ; tie variables have to be nom variables, cannot be logic variables
        `(λ ,(tie y `(var ,y)))))


(fresh (v w)
    (fresh-nom (x y)
        (== `(λ ,(tie x v))
            `(λ ,(tie y w))))
            ; v and w may not be the same, they just need to be nominally the same once all occurances of x and y have been replaced within them

(fresh (w)
    (fresh-nom (x)
        (hash x `(λ ,(tie (y w)))))) ; this says the x can't appear free in w

so (hash x `(λ ,(tie y `(var ,x)))) ; (λ (y) x) since x appears free in the lambda expression, it violates the hash constraint
but (hash x `(λ ,(tie x `(var ,x)))) ; (λ (x) x) this does not violate the constraint since x occurs bound, not free 

